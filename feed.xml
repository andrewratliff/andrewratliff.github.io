<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-04-22T15:03:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>How to Deploy a Middleman Project to GitHub Pages Manually</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/22/deploying-middleman-blog-to-ghpages.html"/>
    <id>http://blog.url.com/2016/04/22/deploying-middleman-blog-to-ghpages.html</id>
    <published>2016-04-22T15:03:00-04:00</published>
    <updated>2016-04-23T16:10:56-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I recently decided to create a personal blog using a static site framework called &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. Using a couple tutorials, I found it very easy to style and crank out blog posts. I soon ran into trouble though when I tried to deploy my blog to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;. After trying to use a couple different gems (unsuccessfully), I found &lt;a href="https://stackoverflow.com/questions/27680342/how-to-deploy-a-middleman-site-to-github-user-page"&gt;this&lt;/a&gt; post on StackOverflow that had some answers. I have adapted the advice on StackOverflow to deploy my blog as a user website instead of a project website. Below are the steps I used to get my site up and running.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you already have a Middleman blog created on your machine. Check out the &lt;a href="https://middlemanapp.com/basics/blogging/"&gt;Middleman&lt;/a&gt; docs on setting up a blog if you haven't already.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;

&lt;h4 id="configrb"&gt;config.rb&lt;/h4&gt;
&lt;p&gt;Add the following to your &lt;code&gt;config.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;activate :relative_assets&lt;/code&gt;
&lt;code&gt;set :relative_links, true&lt;/code&gt;&lt;/p&gt;

&lt;h4 id="gitignore"&gt;.gitignore&lt;/h4&gt;
&lt;p&gt;Make sure you are ignoring the build folder by adding the following to your &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/build&lt;/code&gt;&lt;/p&gt;

&lt;h4 id="nojekyll"&gt;.nojekyll&lt;/h4&gt;

&lt;p&gt;Disable the use of the Jekyll preprocessor. Create a blank file name &lt;code&gt;.nojekyll&lt;/code&gt; in the &lt;code&gt;source&lt;/code&gt; directory. You can do this from the root of your project with the &lt;code&gt;touch&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch source/.nojekyll&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="prepare-repository"&gt;Prepare repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Publish project to GitHub as [GitHub username].github.io&lt;/li&gt;
  &lt;li&gt;From the root of your project execute &lt;code&gt;bundle exec middleman build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the build folder that was created by the previous command.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git init .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git remote add origin git@github...git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id="how-to-deploy"&gt;How to deploy&lt;/h2&gt;

&lt;p&gt;This will be your routine every time you want to update your site.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At the root of the project execute: &lt;code&gt;bundle exec middleman build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cd build/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git add -A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git commit -m "thoughtful commit message"&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt; (if it's the first time pushing your project use &lt;code&gt;git push -u origin master&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Variables as Pointers</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/21/variables-as-pointers.html"/>
    <id>http://blog.url.com/2016/04/21/variables-as-pointers.html</id>
    <published>2016-04-21T09:40:00-04:00</published>
    <updated>2016-04-21T10:43:35-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Variables as pointers is the idea that variables point to specific place in memory. This is a concept that I didn't quite grasp when coming out of my boot camp. The best way to fully understand this idea is to take a look at some examples.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a = 'hi there'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b = a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a = 'not here'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;b&lt;/code&gt; in the above code? My first instinct was that &lt;code&gt;b&lt;/code&gt; would be the string &lt;code&gt;'not here'&lt;/code&gt; because the second line said that &lt;code&gt;b = a&lt;/code&gt;. In fact, &lt;code&gt;b&lt;/code&gt; is still pointing to the string &lt;code&gt;'hi there'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="variables as pointers example image1" src="https://d2aw5xe2jldque.cloudfront.net/books/ruby/images/variables_pointers1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;The above diagram brings us back to the idea that variables point to physical spaces in memory; variables are essentially labels. In the third line &lt;code&gt;a = 'not here'&lt;/code&gt; the variable &lt;code&gt;a&lt;/code&gt; is reassigned to a new place in memory, which is a completely different string from the string that &lt;code&gt;b&lt;/code&gt; is pointing to. The &lt;code&gt;=&lt;/code&gt; operator assigns (or reassigns) variables. Even if the third line read: &lt;code&gt;a = 'hi there'&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; would point to a different string than &lt;code&gt;b&lt;/code&gt; thanks to the &lt;code&gt;=&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Example 2:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a = 'hi there'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b = a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a &amp;lt;&amp;lt; ', Bob'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;b&lt;/code&gt; in the code above? Why is it different from the first example? What is difference between the &lt;code&gt;=&lt;/code&gt; operator and the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator?&lt;/p&gt;

&lt;p&gt;&lt;img alt="variables as pointers example image2" src="https://d2aw5xe2jldque.cloudfront.net/books/ruby/images/variables_pointers2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the diagram above, the third line did not reassign &lt;code&gt;a&lt;/code&gt;. Instead, &lt;code&gt;a &amp;lt;&amp;lt; ', Bob'&lt;/code&gt; modified the original string that both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are still pointing to. As a new programmer, it is important to know which operators (methods) mutate the caller. Other data structures can also be mutated by methods. Methods like &lt;code&gt;map!&lt;/code&gt; and &lt;code&gt;uniq!&lt;/code&gt; will mutate arrays. This is a key concept that can help troubleshoot problems that arise when first starting out.&lt;/p&gt;

&lt;p&gt;The examples in this post were taking from the &lt;a href="https://launchschool.com/books/ruby/read/introduction"&gt;LaunchSchool&lt;/a&gt; book.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello, World!</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/20/hello-world.html"/>
    <id>http://blog.url.com/2016/04/20/hello-world.html</id>
    <published>2016-04-20T12:10:00-04:00</published>
    <updated>2016-04-20T12:12:22-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is the first post on my new blog. This blog was built using Middleman, Burbon, Bitters, and Neat!&lt;/p&gt;
</content>
  </entry>
</feed>
